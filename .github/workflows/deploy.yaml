name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.5.1

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: dependency-cache-${{ hashFiles('package.json') }}
          restore-keys: |
            dependency-cache-

      - name: Install dependencies
        working-directory: ./api
        run: yarn install

      - name: Build TypeScript
        working-directory: ./api
        run: yarn build:tsc

      - name: Persist node_modules artifact
        uses: actions/upload-artifact@v4
        with:
          name: node_modules
          path: ./api/node_modules

      - name: Persist dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: ./api/dist

  test:
    runs-on: ubuntu-latest
    needs: build

    defaults:
      run:
        working-directory: ./api
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose
        run: |
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            docker-compose --version

      - name: Build and Run Docker Compose
        run: |
          set -o pipefail
          docker-compose up --build \
          --abort-on-container-exit \
          --exit-code-from app

  helm_lint: 
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Configure helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod +x get_helm.sh
          ./get_helm.sh

      - name: Lint charts
        working-directory: ./terraform/modules/app
        run: find . -path "./*" -type d -prune -not -name ".git" -not -name ".github" -not -name "docs" | xargs helm lint

  docker_build_push:
    runs-on: ubuntu-latest
    needs: helm_lint

    permissions:
      id-token: write 
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: ./api

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_ID_PROV }}
          create_credentials_file: true
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}       
          token_format: "access_token"
          access_token_lifetime: "120s"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authorize Docker for GCR
        working-directory: ./api
        run: gcloud auth configure-docker gcr.io

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up environment variables
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          APP_NAME: ${{ github.event.repository.name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          NAME=${{ env.REGISTRY }}/${{ env.APP_NAME }}

          if [ "${{ env.GITHUB_REF_NAME }}" = "main" ]; then
            TAG="latest-${{ env.GITHUB_SHA }}"
          else
            TAG="${{ env.GITHUB_REF_NAME }}"
          fi

          IMG=${NAME}:${{ env.GITHUB_SHA }}
          LATEST=${NAME}:${TAG}

          echo "IMAGE=$IMG" >> $GITHUB_ENV
          echo "LATEST_IMAGE=$LATEST" >> $GITHUB_ENV

      - name: Build Docker image
        working-directory: ./api
        run: |
          ls
          docker build -t ${{ env.IMAGE }} .
          docker tag ${{ env.IMAGE }} ${{ env.LATEST_IMAGE }}

      - name: Push Docker image to GCR
        working-directory: ./api
        run: |
          docker push ${{ env.LATEST_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker_build_push

    defaults:
      run:
        working-directory: ./terraform

    permissions:
      id-token: write 
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_ID_PROV }}
          create_credentials_file: true
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}       
          token_format: "access_token"
          access_token_lifetime: "600s"
      - name: Set up environment variables
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          APP_NAME: ${{ github.event.repository.name }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          NAME=${{ env.REGISTRY }}/${{ env.APP_NAME }}

          if [ "${{ env.GITHUB_REF_NAME }}" = "main" ]; then
            TAG="latest-${{ env.GITHUB_SHA }}"
          else
            TAG="${{ env.GITHUB_REF_NAME }}"
          fi

          IMG=${NAME}:${{ env.GITHUB_SHA }}
          LATEST=${NAME}:${TAG}

          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV
      
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.5
          terraform_wrapper: false
             
      - name: Terraform init
        run: terraform init
      
      - name: Terraform Format
        run: terraform fmt -recursive -write=true 

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        id: plan
        env:
          TF_VAR_cluster_name: ${{ vars.CLUSTER_NAME }}
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_network_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_image_repository: ${{ secrets.REGISTRY }}/${{ github.event.repository.name }}
          TF_VAR_image_tag: ${{ env.LATEST_TAG }}
          TF_VAR_app_name: ${{ github.event.repository.name }}
          TF_VAR_app_env: ${{ vars.APP_ENV }}
          TF_VAR_app_namespace: ${{ vars.APP_NAMESPACE }}
        run: terraform plan -var-file="config/config.tfvars" -out="tfplan"
        # continue-on-error: true

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve "tfplan"

      - name: Validate deployment
        working-directory: ./terraform
        id: terraform_output
        run: |
          INGRESS_LOADBALANCER_IP=$(terraform output ingress_loadbalancer_ip)
          echo $INGRESS_LOADBALANCER_IP
          sleep 60
          curl --fail http://$INGRESS_LOADBALANCER_IP/time || exit 1
          